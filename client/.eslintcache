[{"/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/reportWebVitals.js":"1","/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/chat/Chat.js":"2","/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/App.js":"3","/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/chat/widget/ChatWidget.js":"4","/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/index.js":"5"},{"size":362,"mtime":1606172522676,"results":"6","hashOfConfig":"7"},{"size":2168,"mtime":1606251553148,"results":"8","hashOfConfig":"7"},{"size":122,"mtime":1606230741146,"results":"9","hashOfConfig":"7"},{"size":2389,"mtime":1606249343634,"results":"10","hashOfConfig":"7"},{"size":500,"mtime":1606172522675,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"to4a6a",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/reportWebVitals.js",[],"/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/chat/Chat.js",["23"],"/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/App.js",[],"/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/chat/widget/ChatWidget.js",["24"],"import React, { Component } from 'react';\nimport axios from 'axios';\nimport { Widget, addResponseMessage, addUserMessage } from 'react-chat-widget';\n\nimport 'react-chat-widget/lib/styles.css';\n\nclass ChatWidget extends Component {\n\n  constructor(props) {\n    super(props);\n    this.messages = props.messages && props.messages.map(element => {\n      element.displayed = false;\n      return element;\n    });\n\n    this.selfmessages = props.selfmessages && props.selfmessages.map(element => {\n      element.displayed = false;\n      return element;\n    });\n  }\n\n  componentDidMount() {\n    this.updateMessages();\n  }\n\n  componentDidUpdate() {\n    this.updateMessages();\n  }\n\n  updateMessages = () => {\n    if (this.messages) {\n      const existingmessageids = this.messages.map((m) => {\n        return m.messageid;\n      });\n      this.props.messages.forEach((m) => {\n        if (!existingmessageids.includes(m.messageid)) {\n          this.messages.push(m);\n        }\n      });\n      this.messages.forEach(element => {\n        if (!element.displayed) {\n          element.displayed = true;\n          addResponseMessage(element.smstext);\n        }\n      });\n    }\n\n    if (this.selfmessages) {\n      const existingselfmessageids = this.selfmessages.map((m) => {\n        return m.messageid;\n      });\n      this.props.selfmessages.forEach((m) => {\n        if (!existingselfmessageids.includes(m.messageid)) {\n          this.selfmessages.push(m);\n        }\n      });\n      this.selfmessages.forEach(element => {\n        if (!element.displayed) {\n          element.displayed = true;\n          addUserMessage(element.smstext);\n        }\n      });\n    }\n  }\n\n  handleNewUserMessage = (newMessage) => {\n    console.log(`New message incomig! ${newMessage}`);\n    axios({\n      method: 'post',\n      url: '/sms/new',\n      data: {\n        to: this.props.msisdn,\n        message: newMessage\n      }\n    })\n    .then(function(response, body) {\n      console.log(response);\n    });\n  }\n\n  render() {\n    const {\n      msisdn,\n      fetchSMS\n    } = this.props;\n\n    const subtitle = (\n      <span>\n        <a onClick={fetchSMS} href=\"#\">(Refresh)</a>\n      </span>\n    )\n    return (\n      <div className=\"App\">\n        <Widget\n          handleNewUserMessage={this.handleNewUserMessage}\n          title={msisdn}\n          subtitle={subtitle}\n        />\n      </div>\n    );\n  } \n}\n\nexport default ChatWidget;","/Users/austin.takam@ibm.com/workspace/nexmo-app/client/src/index.js",[],{"ruleId":"25","severity":1,"message":"26","line":54,"column":33,"nodeType":"27","messageId":"28","endLine":54,"endColumn":35},{"ruleId":"29","severity":1,"message":"30","line":89,"column":9,"nodeType":"31","endLine":89,"endColumn":40},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]